syntax = "proto3";

package zkprover;

message Version {
    string v0_0_1 = 0;
}

// timestamps are represented in unix time in seconds

/**
 * Define all methods implementes by the gRPC
 * GetStatus: non-blocking call
 * GenProof: non-blocking call
 * Cancel: non-blocking call
 * GetProof: non-blocking call
 * Execute: blocking calls
 */
service ZKProver {
    rpc GetStatus(NoParams) returns (ResGetStatus) {}
    rpc GenProof(InputProver) returns (ResGenProof) {}
    rpc Cancel(RequestId) returns (ResCancel) {}
    rpc GetProof(RequestId) returns (ResGetProof) {}
    rpc Execute(stream InputProver) returns (stream ResExecute) {}
}

/**
 * Message input types definition
 */
message NoParams {}

message RequestId {
    string id = 0;
}

/*
 * Message output responses types
 */
message ResGetStatus {
    enum StatusProver {
        BOOTING = 0;
        COMPUTING = 1;
        IDLE = 2;
        HALT = 3;
    }
    StatusProver state = 0;
    string last_computed_request_id = 1;
    uint64 last_computed_end_time = 2;
    string current_computing_request_id = 3;
    uint64 current_computing_start_time = 4;
    string version_proto = 5;
    string version_server = 6;
    repeated string pending_request_queue_ids = 7;
}

message ResGenProof {
    enum ResultGenProof {
        OK = 0;
        ERROR = 1;
        INTERNAL_ERROR = 2;
    }
    string id = 0;
    ResultGenProof result = 1;
}

message ResCancel {
    enum ResultCancel {
        OK = 0;
        ERROR = 1;
    }
    ResultCancel result = 0;
}

message ResGetProof {
    enum ResultGetProof {
        COMPLETED_OK = 0;
        ERROR = 1;
        COMPLETED_ERR = 2;
        PENDING = 3;
        INTERNAL_ERROR = 4;
        CANCEL = 5;
    }
    string id = 0;
    Proof proof = 1;
    PublicInputsExtended public = 2;
    ResultGetProof result = 3;
    string result_string = 4;
}

message ResExecute {
    map<string, string> diff_keys_values = 0;
    string new_state_root = 1;
    ZkCounters counters = 2;
    repeated string receipts = 3;
    repeated string logs = 4;
}

message ZkCounters {
    uint32 ecrecover = 0;
    uint32 hash_poseidon = 1;
    uint32 hash_keccak = 2;
    uint32 arith = 3;
}

/*
 * Define common messages
 */
message PublicInputs {
    string old_state_root = 1;
    string old_local_exit_root = 2;
    string new_state_root = 3;
    string new_local_exit_root = 4;
    string sequencer_addr = 5;
    string batch_hash_data = 6;
    uint32 chain_id = 7;
    uint32 batch_num = 8;
    uint32 block_num = 9;
    uint64 eth_timestamp = 10;
}

message ProofB {
    repeated string proofs = 1;
}

message Proof {
    repeated string proofA = 1;
    repeated ProofB proofB = 2;
    repeated string proofC = 3;
}

message InputProver {
    PublicInputs public_inputs = 1;
    string global_exit_root = 2;
    repeated string txs = 3;
    map<string, string> db = 0;
}

message InputProverExecute {
    PublicInputs public_inputs = 1;
    string global_exit_root = 2;
    repeated string txs = 3;
}

message PublicInputsExtended {
    PublicInputs public_inputs = 2;
    string input_hash = 5;
}