syntax = "proto3";

package executor.v1;
import "executor/v1/executor_common.proto";

option go_package = "github.com/0xPolygonHermez/zkevm-node/state/runtime/executor";

message ProcessBatchRequest {
    bytes old_state_root = 1;
    bytes old_acc_input_hash = 2;
    uint64 old_batch_num = 3;
    uint64 chain_id = 4;
    uint64 fork_id = 5;
    bytes batch_l2_data = 6;
    bytes global_exit_root = 7;
    uint64 eth_timestamp = 8;
    string coinbase = 9;
    uint32 update_merkle_tree = 10;
    // flag to indicate that counters should not be taken into account
    uint64 no_counters = 11;
    // from is used for unsigned transactions with sender
    string from = 12;
    // For testing purposes only
    map<string, string> db = 13;
    map<string, string> contracts_bytecode = 14; // For debug/testing purpposes only. Don't fill this on production
    TraceConfig trace_config = 15;
    string external_request_id = 16;
    uint32 get_keys = 17; // if 1, the keys used to read or write storage values will be returned
    // The state override set is an optional address-to-state mapping,
    // where each entry specifies some state to be ephemerally overridden
    // prior to executing the call.
    map<string, OverrideAccount> state_override = 18;
}

message ProcessBatchResponse {
    bytes new_state_root = 1;
    bytes new_acc_input_hash = 2;
    bytes new_local_exit_root = 3;
    uint64 new_batch_num = 4;
    uint32 cnt_keccak_hashes = 5;
    uint32 cnt_poseidon_hashes = 6;
    uint32 cnt_poseidon_paddings = 7;
    uint32 cnt_mem_aligns = 8;
    uint32 cnt_arithmetics = 9;
    uint32 cnt_binaries = 10;
    uint32 cnt_steps = 11;
    uint64 cumulative_gas_used = 12;
    repeated ProcessTransactionResponse responses = 13;
    ExecutorError error = 14;
    map<string, InfoReadWrite> read_write_addresses = 15;
    uint64 flush_id = 16;
    uint64 stored_flush_id = 17;
    string prover_id = 18;
    repeated bytes nodes_keys = 19;
    repeated bytes program_keys = 20;
    uint64 fork_id = 21;
}

/**
 * @dev GetFlushStatusResponse
 * @param {last_sent_flush_id} - id of the last flush data sent to database
 * @param {sending_flush_id} - id of the flush data being sent now to database
 * @param {last_flush_id} - id assigned to the last call to flush
 * @param {pending_to_flush_nodes} - number of SMT nodes pending to flush
 * @param {pending_to_flush_program} - number of SC programs pending to flush
 * @param {storing_nodes} - number of SMT nodes being stored in the hash database
 * @param {storing_program} - number of SC programs being stored in the hash database
 * @param {prover_id} - id assigned to this instance of the prover process
 */
message GetFlushStatusResponse {
    uint64 stored_flush_id = 1;
    uint64 storing_flush_id = 2;
    uint64 last_flush_id = 3;
    uint64 pending_to_flush_nodes = 4;
    uint64 pending_to_flush_program = 5;
    uint64 storing_nodes = 6;
    uint64 storing_program = 7;
    string prover_id = 8;
}

// Trace configuration request params
message TraceConfig {
    // Disables storage (default=false)
    uint32 disable_storage = 1;
    // Disables stack (default=false)
    uint32 disable_stack = 2;
    // Enables memory (default=false)
    uint32 enable_memory = 3;
    // Enables return data (default=false)
    uint32 enable_return_data = 4;
    // Hash of tx in batch to retrieve the trace
    bytes tx_hash_to_generate_full_trace = 5;
}

// OverrideAccount indicates the overriding fields of account during the execution
// of a message call.
// Note, state and stateDiff can't be specified at the same time. If state is
// set, message execution will only use the data in the given state. Otherwise
// if statDiff is set, all diff will be applied first and then execute the call
// message.
message OverrideAccount {
    // Fake balance to set for the account before executing the call.
    bytes balance = 1;
    // Fake nonce to set for the account before executing the call.
    uint64 nonce = 2;
    // Fake EVM bytecode to inject into the account before executing the call.
    bytes code = 3;
    // Fake key-value mapping to override all slots in the account storage before executing the call.
    map<string, bytes> state = 4;
    // Fake key-value mapping to override individual slots in the account storage before executing the call.
    map<string, bytes> state_diff = 5;
}

message InfoReadWrite {
    // If nonce="" then it has not been set; if set, string is in decimal (base 10)
    string nonce = 1;
    // If balance="" then it has not been set; if set, string is in decimal (base 10)
    string balance = 2;
}

message FullTrace {
    TransactionContext context = 1;
    repeated TransactionStep steps = 2;
}

message TransactionContext {
    // CALL or CREATE
    string type = 1;
    // Sender of the transaction
    string from = 2;
    // Target of the transaction
    string to = 3;
    // Input data of the transaction
    bytes data = 4;
    // Gas of the transaction
    uint64 gas = 5;
    // Value of the transaction
    string value = 6;
    // Hash of the batch in which the transaction was included
    bytes batch = 7;
    // Returned data from the runtime (function result or data supplied with revert opcode)
    bytes output = 8;
    // Total gas used as result of execution
    uint64 gas_used = 9;
    // Gas Price
    string gas_price = 10;
    // Execution Time
    uint32 execution_time = 11;
    // Starting state root
    bytes old_state_root = 12;
}

message TransactionStep {
    bytes state_root = 1;
    // Call depth
    uint32 depth = 2;
    // Program counter
    uint64 pc = 3;
    // Remaining gas
    uint64 gas = 4;
    // Gas cost of the operation
    uint64 gas_cost = 5;
    // Gas refunded during the operation
    uint64 gas_refund = 6;
    // Opcode
    uint32 op = 7;
    // Content of the stack
    repeated string stack = 8;
     // Content of memory, starting at memory_offset, showing only changes vs. previous step
    bytes memory = 9;
    // Total size of memory
    uint32 memory_size = 10;
    // Offset of memory changes
    uint32 memory_offset = 11;
    // Content of the stack
    // Return Data
    bytes return_data = 12;
    // Contract information
    Contract contract = 13;
    // Error
    RomError error = 14;
    // Content of the storage
    map<string, string> storage = 15;
}

message Contract {
    string address = 1;
    string caller = 2;
    string value = 3;
    bytes data = 4;
    uint64 gas = 5;
    // Define type of internal call: CREATE, CREATE2, CALL, CALLCODE, DELEGATECALL, STATICCALL
    string type = 6;
}

message ProcessTransactionResponse {
    // Hash of the transaction
    bytes tx_hash = 1;
    // RLP encoded transaction
    // [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
    bytes rlp_tx = 2;
    // Type indicates legacy transaction
    // It will be always 0 (legacy) in the executor
    uint32 type = 3;
    // Returned data from the runtime (function result or data supplied with revert opcode)
    bytes return_value = 4;
    // Total gas left as result of execution
    uint64 gas_left = 5;
    // Total gas used as result of execution or gas estimation
    uint64 gas_used = 6;
    // Total gas refunded as result of execution
    uint64 gas_refunded = 7;
    // Any error encountered during the execution
    RomError error = 8;
    // New SC Address in case of SC creation
    string create_address = 9;
    // State Root
    bytes state_root = 10;
    // Logs emited by LOG opcode
    repeated Log logs = 11;
    FullTrace full_trace = 14;
    // Efective Gas Price
    string effective_gas_price = 15;
    uint32 effective_percentage = 16;
    // Flag to indicate if opcode 'GASPRICE' has been called
    uint32 has_gasprice_opcode = 17;
    // Flag to indicate if opcode 'BALANCE' has been called
    uint32 has_balance_opcode = 18;
}

message Log {
    // Address of the contract that generated the event
    string address = 1;
    // List of topics provided by the contract
    repeated bytes topics = 2;
    // Supplied by the contract, usually ABI-encoded
    bytes data = 3;
    // Batch in which the transaction was included
    uint64 batch_number = 4;
    // Hash of the transaction
    bytes tx_hash = 5;
    // Index of the transaction in the block
    uint32 tx_index = 6;
    // Hash of the batch in which the transaction was included
    bytes batch_hash = 7;
    // Index of the log in the block
    uint32 index = 8;
}