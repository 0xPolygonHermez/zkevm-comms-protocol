syntax = "proto3";

import "google/protobuf/empty.proto";

package executor.v1;

option go_package = "github.com/0xPolygonHermez/zkevm-node/state/runtime/executor";

service ExecutorService {
    /// Processes a batch
    rpc ProcessBatch(ProcessBatchRequest) returns (ProcessBatchResponse) {}
    rpc GetFlushStatus (google.protobuf.Empty) returns (GetFlushStatusResponse) {}
}

// Sequencer Must always call with flag 'mock_verify_ger' set to 1
// Either Sequencer or Executor should provide the fake smtProof

message ProcessBatchRequest {
    bytes old_state_root = 1;
    bytes old_acc_input_hash = 2;
    uint64 old_batch_num = 3;
    uint64 chain_id = 4;
    uint64 fork_id = 5;
    bytes batch_l2_data = 6;
    bytes historic_ger_root = 7;
    uint64 eth_timestamp_limit = 8;
    string coinbase = 9;
    bool isForced = 10;
    // TODO: sequencer to mock it. It could be done at executor level
    repeated SiblingsSmtProofGer smt_proofs = 11;
    uint32 update_merkle_tree = 12;
    // flag to indicate that counters should not be taken into account
    uint64 no_counters = 13;
    // from is used for unsigned transactions with sender
    string from = 14;
    // mock_verify_ger is used for skip check when verify smt proof at the time to insert a ger
    bool mock_verify_ger = 15;
    // For testing purposes only
    map<string, string> db = 16;
    map<string, string> contracts_bytecode = 17; // For debug/testing purpposes only. Don't fill this on production
    TraceConfig trace_config = 18;
    string external_request_id = 19;
    // TODO: provide array of GERS inserted
}

message SiblingsSmtProofGer {
    // TODO: add index historicalGER?
    repeated bytes sibglings_smt_proof_ger = 1;
}

message ProcessBatchResponse {
    bytes new_state_root = 1;
    bytes new_acc_input_hash = 2;
    bytes new_local_exit_root = 3;
    uint64 new_batch_num = 4;
    uint32 cnt_keccak_hashes = 5;
    uint32 cnt_poseidon_hashes = 6;
    uint32 cnt_poseidon_paddings = 7;
    uint32 cnt_mem_aligns = 8;
    uint32 cnt_arithmetics = 9;
    uint32 cnt_binaries = 10;
    uint32 cnt_steps = 11;
    repeated ProcessBlockResponse block_responses = 12;
    ExecutorError error = 13;
    map<string, InfoReadWrite> read_write_addresses = 14;
    uint64 flush_id = 15;
    uint64 stored_flush_id = 16;
    string prover_id = 17;
    uint64 gas_used = 18; // Gas used in the batch
}

/**
 * @dev GetFlushStatusResponse
 * @param {last_sent_flush_id} - id of the last flush data sent to database
 * @param {sending_flush_id} - id of the flush data being sent now to database
 * @param {last_flush_id} - id assigned to the last call to flush
 * @param {pending_to_flush_nodes} - number of SMT nodes pending to flush
 * @param {pending_to_flush_program} - number of SC programs pending to flush
 * @param {storing_nodes} - number of SMT nodes being stored in the hash database
 * @param {storing_program} - number of SC programs being stored in the hash database
 * @param {prover_id} - id assigned to this instance of the prover process
 */
message GetFlushStatusResponse {
    uint64 stored_flush_id = 1;
    uint64 storing_flush_id = 2;
    uint64 last_flush_id = 3;
    uint64 pending_to_flush_nodes = 4;
    uint64 pending_to_flush_program = 5;
    uint64 storing_nodes = 6;
    uint64 storing_program = 7;
    string prover_id = 8;
}

// Trace configuration request params
message TraceConfig {
    // Disables storage (default=false)
    uint32 disable_storage = 1;
    // Disables stack (default=false)
    uint32 disable_stack = 2;
    // Enables memory (default=false)
    uint32 enable_memory = 3;
    // Enables return data (default=false)
    uint32 enable_return_data = 4;
    // Hash of tx in batch to retrieve the trace
    bytes tx_hash_to_generate_trace = 5;
}
message InfoReadWrite {
    // If nonce="" then it has not been set; if set, string is in decimal (base 10)
    string nonce = 1;
    // If balance="" then it has not been set; if set, string is in decimal (base 10)
    string balance = 2;
}

message Trace {
    TransactionContext context = 1;
    repeated TransactionStep steps = 2;
}

message TransactionContext {
    // CALL or CREATE
    string type = 1;
    // Sender of the transaction
    string from = 2;
    // Target of the transaction
    string to = 3;
    // Input data of the transaction
    bytes data = 4;
    // Gas of the transaction
    uint64 gas = 5;
    // Value of the transaction
    string value = 6;
    // Hash of the block in which the transaction was included
    bytes block_hash = 7;
    // Returned data from the runtime (function result or data supplied with revert opcode)
    bytes output = 8;
    // Total gas used as result of execution
    uint64 gas_used = 9;
    // Gas Price
    string gas_price = 10;
    // Execution Time
    uint32 execution_time = 11;
    // Starting state root
    bytes old_state_root = 12;
    // The number of transactions made by the sender prior to this one
    uint64 nonce = 13;
    // The integer of the transaction's index position in the block
    uint64 tx_index = 14;
    // The chain id of the transaction, if any
    uint64 chain_id = 15;
}

message TransactionStep {
    bytes state_root = 1;
    // Call depth
    uint32 depth = 2;
    // Program counter
    uint64 pc = 3;
    // Remaining gas
    uint64 gas = 4;
    // Gas cost of the operation
    uint64 gas_cost = 5;
    // Gas refunded during the operation
    uint64 gas_refund = 6;
    // Opcode
    uint32 op = 7;
    // Content of the stack
    repeated string stack = 8;
     // Content of memory, starting at memory_offset, showing only changes vs. previous step
    bytes memory = 9;
    // Total size of memory
    uint32 memory_size = 10;
    // Offset of memory changes
    uint32 memory_offset = 11;
    // Content of the stack
    // Return Data
    bytes return_data = 12;
    // Contract information
    Contract contract = 13;
    // Error
    RomError error = 14;
    // Content of the storage
    map<string, string> storage = 15;
}

message Contract {
    string address = 1;
    string caller = 2;
    string value = 3;
    bytes data = 4;
    uint64 gas = 5;
    // Define type of internal call: CREATE, CREATE2, CALL, CALLCODE, DELEGATECALL, STATICCALL
    string type = 6;
}

message ProcessBlockResponse {
    bytes parent_hash = 1; // The hash of the parent block. Must match the old_state_root
    bytes receipts_root = 2; // The root of the receipts trie of the block
    string coinbase = 3;
    uint32 block_number = 4;
    // The maximum gas allowed in this block
    uint64 gas_limit = 5;
    // The total used gas by all transactions in this block
    uint64 gas_used = 6;
    uint64 timestamp = 7;
    // global exoit root l1InfoTree
    bytes ger = 8;
    // BlockHashL1 l1InfoTree
    bytes ger = 8;
    bytes block_hash_l1 = 9; // must match the new_state_root
    // TODO: check with node team more fields to add
    repeated ProcessTransactionResponse responses = 10;
    // Logs emited by LOG opcode
    repeated Log logs = 11;
}

message ProcessTransactionResponse {
    // Hash of the transaction
    bytes tx_hash = 1;
    // Hash of the transaction computed by the ROM
    bytes tx_hash_L2 = 2;
    // RLP encoded transaction
    // [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
    bytes rlp_tx = 3;
    // The hash of the block where this transaction was in
    bytes block_hash = 4;
    // The block number where this transaction was in
    uint64 block_number = 5;
    // Type indicates legacy transaction
    // It will be always 0 (legacy) in the executor
    uint32 type = 6;
    // Returned data from the runtime (function result or data supplied with revert opcode)
    bytes return_value = 7;
    // Total gas left as result of execution
    uint64 gas_left = 8;
    // Total gas used as result of execution or gas estimation
    uint64 gas_used = 9;
    // Cumulative gas used by this tranaction in the block
    uint64 cumulative_gas_used = 10;
    // Total gas refunded as result of execution
    uint64 gas_refunded = 11;
    // Any error encountered during the execution
    RomError error = 12;
    // New SC Address in case of SC creation
    string create_address = 13;
    // State Root
    bytes state_root = 14;
    // Trace
    Trace trace = 15;
    // Efective Gas Price
    string effective_gas_price = 16;
    uint32 effective_percentage = 17;
}

message Log {
    // Address of the contract that generated the event
    string address = 1;
    // List of topics provided by the contract
    repeated bytes topics = 2;
    // Supplied by the contract, usually ABI-encoded
    bytes data = 3;
    // Batch in which the transaction was included
    uint64 block_number = 4;
    // Hash of the transaction
    bytes tx_hash = 5;
    // Hash of the transaction L2 computed by the rom
    bytes tx_hash_l2 = 6;
    // Index of the transaction in the block
    uint32 tx_index = 7;
    // Hash of the block in which the transaction was included
    bytes block_hash = 8;
    // Index of the log in the block
    uint32 index = 9;
}

enum RomError {
    ROM_ERROR_UNSPECIFIED = 0;
    // ROM_ERROR_NO_ERROR indicates the execution ended successfully
    ROM_ERROR_NO_ERROR = 1;
    // ROM_ERROR_OUT_OF_GAS indicates there is not enough balance to continue the execution
    ROM_ERROR_OUT_OF_GAS = 2;
    // ROM_ERROR_STACK_OVERFLOW indicates a stack overflow has happened
    ROM_ERROR_STACK_OVERFLOW = 3;
    // ROM_ERROR_STACK_UNDERFLOW indicates a stack overflow has happened
    ROM_ERROR_STACK_UNDERFLOW = 4;
    // ROM_ERROR_MAX_CODE_SIZE_EXCEEDED indicates the code size is beyond the maximum
    ROM_ERROR_MAX_CODE_SIZE_EXCEEDED = 5;
    // ROM_ERROR_CONTRACT_ADDRESS_COLLISION there is a collision regarding contract addresses
    ROM_ERROR_CONTRACT_ADDRESS_COLLISION = 6;
    // ROM_ERROR_EXECUTION_REVERTED indicates the execution has been reverted
    ROM_ERROR_EXECUTION_REVERTED = 7;
    // ROM_ERROR_OUT_OF_COUNTERS_STEP indicates there is not enough step counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_STEP = 8;
    // ROM_ERROR_OUT_OF_COUNTERS_KECCAK indicates there is not enough keccak counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_KECCAK = 9;
    // ROM_ERROR_OUT_OF_COUNTERS_BINARY indicates there is not enough binary counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_BINARY = 10;
    // ROM_ERROR_OUT_OF_COUNTERS_MEM indicates there is not enough memory aligncounters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_MEM = 11;
    // ROM_ERROR_OUT_OF_COUNTERS_ARITH indicates there is not enough arith counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_ARITH = 12;
    // ROM_ERROR_OUT_OF_COUNTERS_PADDING indicates there is not enough padding counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_PADDING = 13;
    // ROM_ERROR_OUT_OF_COUNTERS_POSEIDON indicates there is not enough poseidon counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_POSEIDON = 14;
    // ROM_ERROR_INVALID_JUMP indicates there is an invalid jump opcode
    ROM_ERROR_INVALID_JUMP = 15;
    // ROM_ERROR_INVALID_OPCODE indicates there is an invalid opcode
    ROM_ERROR_INVALID_OPCODE = 16;
    // ROM_ERROR_INVALID_STATIC indicates there is an invalid static call
    ROM_ERROR_INVALID_STATIC = 17;
    // ROM_ERROR_INVALID_BYTECODE_STARTS_EF indicates there is a bytecode starting with 0xEF
    ROM_ERROR_INVALID_BYTECODE_STARTS_EF = 18;
    // ROM_ERROR_INTRINSIC_INVALID_SIGNATURE indicates the transaction is failing at the signature intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_SIGNATURE = 19;
    // ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID indicates the transaction is failing at the chain id intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID = 20;
    // ROM_ERROR_INTRINSIC_INVALID_NONCE indicates the transaction is failing at the nonce intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_NONCE = 21;
    // ROM_ERROR_INTRINSIC_INVALID_GAS indicates the transaction is failing at the gas limit intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT = 22;
    // ROM_ERROR_INTRINSIC_INVALID_BALANCE indicates the transaction is failing at balance intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_BALANCE = 23;
    // ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT indicates the batch is exceeding the batch gas limit
    ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT = 24;
    // ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE indicates the transaction sender is invalid
    ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE = 25;
    // ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW indicates the transaction gasLimit*gasPrice > MAX_UINT_256 - 1
    ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW = 26;
    // ROM_ERROR_BATCH_DATA_TOO_BIG indicates the batch_l2_data is too big to be processed
    ROM_ERROR_BATCH_DATA_TOO_BIG = 27;
    // ROM_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
    ROM_ERROR_UNSUPPORTED_FORK_ID = 28;
}

enum ExecutorError {
    EXECUTOR_ERROR_UNSPECIFIED = 0;
    // EXECUTOR_ERROR_NO_ERROR indicates there was no error
    EXECUTOR_ERROR_NO_ERROR = 1;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_KECCAK indicates that the keccak counter exceeded the maximum
    EXECUTOR_ERROR_COUNTERS_OVERFLOW_KECCAK = 2;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_BINARY indicates that the binary counter exceeded the maximum
    EXECUTOR_ERROR_COUNTERS_OVERFLOW_BINARY = 3;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_MEM indicates that the memory align counter exceeded the maximum
    EXECUTOR_ERROR_COUNTERS_OVERFLOW_MEM = 4;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_ARITH indicates that the arith counter exceeded the maximum
    EXECUTOR_ERROR_COUNTERS_OVERFLOW_ARITH = 5;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_PADDING indicates that the padding counter exceeded the maximum
    EXECUTOR_ERROR_COUNTERS_OVERFLOW_PADDING = 6;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_POSEIDON indicates that the poseidon counter exceeded the maximum
    EXECUTOR_ERROR_COUNTERS_OVERFLOW_POSEIDON = 7;
    // EXECUTOR_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
    EXECUTOR_ERROR_UNSUPPORTED_FORK_ID = 8;
    // EXECUTOR_ERROR_BALANCE_MISMATCH indicates that there is a balance mismatch error in the ROM
    EXECUTOR_ERROR_BALANCE_MISMATCH = 9;
    // EXECUTOR_ERROR_FEA2SCALAR indicates that there is a fea2scalar error in the execution
    EXECUTOR_ERROR_FEA2SCALAR = 10;
    // EXECUTOR_ERROR_TOS32 indicates that there is a TOS32 error in the execution
    EXECUTOR_ERROR_TOS32 = 11;
}
