syntax = "proto3";

package executor.v1;

option go_package = "github.com/0xPolygonHermez/zkevm-node/state/runtime/executor";

enum RomError {
    ROM_ERROR_UNSPECIFIED = 0;
    // ROM_ERROR_NO_ERROR indicates the execution ended successfully
    ROM_ERROR_NO_ERROR = 1;
    // ROM_ERROR_OUT_OF_GAS indicates there is not enough balance to continue the execution
    ROM_ERROR_OUT_OF_GAS = 2;
    // ROM_ERROR_STACK_OVERFLOW indicates a stack overflow has happened
    ROM_ERROR_STACK_OVERFLOW = 3;
    // ROM_ERROR_STACK_UNDERFLOW indicates a stack overflow has happened
    ROM_ERROR_STACK_UNDERFLOW = 4;
    // ROM_ERROR_MAX_CODE_SIZE_EXCEEDED indicates the code size is beyond the maximum
    ROM_ERROR_MAX_CODE_SIZE_EXCEEDED = 5;
    // ROM_ERROR_CONTRACT_ADDRESS_COLLISION there is a collision regarding contract addresses
    ROM_ERROR_CONTRACT_ADDRESS_COLLISION = 6;
    // ROM_ERROR_EXECUTION_REVERTED indicates the execution has been reverted
    ROM_ERROR_EXECUTION_REVERTED = 7;
    // ROM_ERROR_OUT_OF_COUNTERS_STEP indicates there is not enough step counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_STEP = 8;
    // ROM_ERROR_OUT_OF_COUNTERS_KECCAK indicates there is not enough keccak counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_KECCAK = 9;
    // ROM_ERROR_OUT_OF_COUNTERS_BINARY indicates there is not enough binary counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_BINARY = 10;
    // ROM_ERROR_OUT_OF_COUNTERS_MEM indicates there is not enough memory aligncounters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_MEM = 11;
    // ROM_ERROR_OUT_OF_COUNTERS_ARITH indicates there is not enough arith counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_ARITH = 12;
    // ROM_ERROR_OUT_OF_COUNTERS_PADDING indicates there is not enough padding counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_PADDING = 13;
    // ROM_ERROR_OUT_OF_COUNTERS_POSEIDON indicates there is not enough poseidon counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_POSEIDON = 14;
    // ROM_ERROR_OUT_OF_COUNTERS_SHA indicates there is not enough sha counters to continue the execution
    ROM_ERROR_OUT_OF_COUNTERS_SHA = 15;
    // ROM_ERROR_INVALID_JUMP indicates there is an invalid jump opcode
    ROM_ERROR_INVALID_JUMP = 16;
    // ROM_ERROR_INVALID_OPCODE indicates there is an invalid opcode
    ROM_ERROR_INVALID_OPCODE = 17;
    // ROM_ERROR_INVALID_STATIC indicates there is an invalid static call
    ROM_ERROR_INVALID_STATIC = 18;
    // ROM_ERROR_INVALID_BYTECODE_STARTS_EF indicates there is a bytecode starting with 0xEF
    ROM_ERROR_INVALID_BYTECODE_STARTS_EF = 19;
    // ROM_ERROR_INTRINSIC_INVALID_SIGNATURE indicates the transaction is failing at the signature intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_SIGNATURE = 20;
    // ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID indicates the transaction is failing at the chain id intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID = 21;
    // ROM_ERROR_INTRINSIC_INVALID_NONCE indicates the transaction is failing at the nonce intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_NONCE = 22;
    // ROM_ERROR_INTRINSIC_INVALID_GAS indicates the transaction is failing at the gas limit intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT = 23;
    // ROM_ERROR_INTRINSIC_INVALID_BALANCE indicates the transaction is failing at balance intrinsic check
    ROM_ERROR_INTRINSIC_INVALID_BALANCE = 24;
    // ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT indicates the batch is exceeding the batch gas limit
    ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT = 25;
    // ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE indicates the transaction sender is invalid
    ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE = 26;
    // ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW indicates the transaction gasLimit*gasPrice > MAX_UINT_256 - 1
    ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW = 27;
    // ROM_ERROR_BATCH_DATA_TOO_BIG indicates the batch_l2_data is too big to be processed
    ROM_ERROR_BATCH_DATA_TOO_BIG = 28;
    // ROM_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
    ROM_ERROR_UNSUPPORTED_FORK_ID = 29;
    // ROM_ERROR_INVALID_RLP indicates that there has been an error while parsing the RLP
    ROM_ERROR_INVALID_RLP = 30;
    // START V2 ROM ERRORS
    // ROM_ERROR_INVALID_DECODE_CHANGE_L2_BLOCK indicates that there has been an error while parsing decoding a change l2 block transaction
    ROM_ERROR_INVALID_DECODE_CHANGE_L2_BLOCK = 31;
    // ROM_ERROR_INVALID_NOT_FIRST_TX_CHANGE_L2_BLOCK indicates that the first transaction in a batch is not a change l2 block transaction
    ROM_ERROR_INVALID_NOT_FIRST_TX_CHANGE_L2_BLOCK = 32;
}

enum ExecutorError {
    EXECUTOR_ERROR_UNSPECIFIED = 0;
    // EXECUTOR_ERROR_NO_ERROR indicates there was no error
    EXECUTOR_ERROR_NO_ERROR = 1;
    // EXECUTOR_ERROR_DB_ERROR indicates that there is an error connecting to the database
    EXECUTOR_ERROR_DB_ERROR = 2;
    // EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS indicates that the main execution exceeded the maximum number of steps
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS = 3;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_KECCAK indicates that the keccak counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK = 4;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_BINARY indicates that the binary counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY = 5;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_MEM indicates that the memory align counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM = 6;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_ARITH indicates that the arith counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH = 7;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_PADDING indicates that the padding counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING = 8;
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_POSEIDON indicates that the poseidon counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON = 9;
    // EXECUTOR_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
    EXECUTOR_ERROR_UNSUPPORTED_FORK_ID = 10;
    // EXECUTOR_ERROR_BALANCE_MISMATCH indicates that there is a balance mismatch error in the ROM
    EXECUTOR_ERROR_BALANCE_MISMATCH = 11;
    // EXECUTOR_ERROR_FEA2SCALAR indicates that there is a fea2scalar error in the execution
    EXECUTOR_ERROR_FEA2SCALAR = 12;
    // EXECUTOR_ERROR_TOS32 indicates that there is a TOS32 error in the execution
    EXECUTOR_ERROR_TOS32 = 13;
    // EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX indicates that there is an unsigned TX in a non-process batch (i.e. in a prover request)
    EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX = 14;
    // EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS indicates that there is a no-counters request in a non-process batch (i.e. in a prover request)
    EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS = 15;
    // EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO indicates that there is a divide-by-zero situation during an ECRecover
    EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO = 16;
    // EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE indicates that an address is out of valid memory space range
    EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE = 17;
    // EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE indicates that an address is negative
    EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE = 18;
    // EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY indicates that a register value is out of range while building storage key
    EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY = 19;
    // EXECUTOR_ERROR_SM_MAIN_HASHK indicates that a register value is out of range while calculating a Keccak hash
    EXECUTOR_ERROR_SM_MAIN_HASHK = 20;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a Keccak hash
    EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE = 21;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE indicates that a position register value is negative while calculating a Keccak hash
    EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE = 22;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a Keccak hash
    EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE = 23;
    // EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a Keccak hash digest
    EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND = 24;
    // EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a Keccak hash digest
    EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED = 25;
    // EXECUTOR_ERROR_SM_MAIN_HASHP indicates that a register value is out of range while calculating a Poseidon hash
    EXECUTOR_ERROR_SM_MAIN_HASHP = 26;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a Poseidon hash
    EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE = 27;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE indicates that a position register value is negative while calculating a Poseidon hash
    EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE = 28;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a Poseidon hash
    EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE = 29;
    // EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a Poseidon hash digest
    EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND = 30;
    // EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a Poseidon hash digest
    EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED = 31;
    // EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE indicates that the an offset register value is out of range while doing a mem align operation
    EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE = 32;
    // EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN indicates that we got more than one free inputs in one ROM instruction
    EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN = 33;
    // EXECUTOR_ERROR_SM_MAIN_ASSERT indicates that the ROM assert instruction failed
    EXECUTOR_ERROR_SM_MAIN_ASSERT = 34;
    // EXECUTOR_ERROR_SM_MAIN_MEMORY indicates that the memory instruction check failed
    EXECUTOR_ERROR_SM_MAIN_MEMORY = 35;
    // EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH indicates that the storage read instruction check failed
    EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH = 36;
    // EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH indicates that the storage read instruction check failed
    EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH = 37;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH indicates that the Keccak hash instruction value check failed
    EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH = 38;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH indicates that the Keccak hash instruction padding check failed
    EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH = 39;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH indicates that the Keccak hash instruction size check failed
    EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH = 40;
    // EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH indicates that the Keccak hash length instruction length check failed
    EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH = 41;
    // EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE indicates that the Keccak hash length instruction called once check failed
    EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE = 42;
    // EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND indicates that the Keccak hash digest instruction slot not found
    EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND = 43;
    // EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH indicates that the Keccak hash digest instruction digest check failed
    EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH = 44;
    // EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE indicates that the Keccak hash digest instruction called once check failed
    EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE = 45;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH indicates that the Poseidon hash instruction value check failed
    EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH = 46;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH indicates that the Poseidon hash instruction padding check failed
    EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH = 47;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH indicates that the Poseidon hash instruction size check failed
    EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH = 48;
    // EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH indicates that the Poseidon hash length instruction length check failed
    EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH = 49;
    // EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE indicates that the Poseidon hash length instruction called once check failed
    EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE = 50;
    // EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH indicates that the Poseidon hash digest instruction digest check failed
    EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH = 51;
    // EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE indicates that the Poseidon hash digest instruction called once check failed
    EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE = 52;
    // EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH indicates that the arith instruction check failed
    EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH = 53;
    // EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH indicates that the arith ECRecover instruction check failed
    EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH = 54;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH indicates that the binary add instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH = 55;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH indicates that the binary sub instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH = 56;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH indicates that the binary less than instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH = 57;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH indicates that the binary signed less than instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH = 58;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH indicates that the binary equal instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH = 59;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH indicates that the binary and instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH = 60;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH indicates that the binary or instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH = 61;
    // EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH indicates that the binary xor instruction check failed
    EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH = 62;
    // EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH indicates that the memory align write instruction check failed
    EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH = 63;
    // EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH indicates that the memory align write 8 instruction check failed
    EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH = 64;
    // EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH indicates that the memory align read instruction check failed
    EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH = 65;
    // EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE indicates that the JMPN instruction found a jump position out of range
    EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE = 66;
    // EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE indicates that the main execution Keccak check found read out of range
    EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE = 67;
    // EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE indicates that the main execution Poseidon check found read out of range
    EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE = 68;
    // EXECUTOR_ERROR_INVALID_OLD_STATE_ROOT indicates that the input parameter old_state_root is invalid
    EXECUTOR_ERROR_INVALID_OLD_STATE_ROOT = 69;
    // EXECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH indicates that the input parameter old_acc_input_hash is invalid
    EXECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH = 70;
    // EXECUTOR_ERROR_INVALID_CHAIN_ID indicates that the input parameter chain_id is invalid
    EXECUTOR_ERROR_INVALID_CHAIN_ID = 71;
    // EXECUTOR_ERROR_INVALID_BATCH_L2_DATA indicates that the input parameter batch_l2_data is invalid
    EXECUTOR_ERROR_INVALID_BATCH_L2_DATA = 72;
    // EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_ROOT indicates that the input parameter global_exit_root is invalid
    EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_ROOT = 73;
    // EXECUTOR_ERROR_INVALID_COINBASE indicates that the input parameter coinbase (i.e. sequencer address) is invalid
    EXECUTOR_ERROR_INVALID_COINBASE = 74;
    // EXECUTOR_ERROR_INVALID_FROM indicates that the input parameter from is invalid
    EXECUTOR_ERROR_INVALID_FROM = 75;
    // EXECUTOR_ERROR_INVALID_DB_KEY indicates that the input parameter db key is invalid
    EXECUTOR_ERROR_INVALID_DB_KEY = 76;
    // EXECUTOR_ERROR_INVALID_DB_VALUE indicates that the input parameter db value is invalid
    EXECUTOR_ERROR_INVALID_DB_VALUE = 77;
    // EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_KEY indicates that the input parameter contracts_bytecode key is invalid
    EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_KEY = 78;
    // EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE indicates that the input parameter contracts_bytecode value is invalid
    EXECUTOR_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE = 79;
    // EXECUTOR_ERROR_INVALID_GET_KEY indicates that the input parameter get key is invalid, e.g. is true but fork_id<5
    EXECUTOR_ERROR_INVALID_GET_KEY = 80;
    // START V2 EXECUTOR ERRORS
    // EXECUTOR_ERROR_COUNTERS_OVERFLOW_SHA256 indicates that the SHA-256 counter exceeded the maximum
    EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_SHA256 = 81;
    // EXECUTOR_ERROR_SM_MAIN_HASHS indicates that a register value is out of range while calculating a SHA-256 hash
    EXECUTOR_ERROR_SM_MAIN_HASHS = 82;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a SHA-256 hash
    EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_OUT_OF_RANGE = 83;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_NEGATIVE indicates that a position register value is negative while calculating a SHA-256 hash
    EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_NEGATIVE = 84;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a SHA-256 hash
    EXECUTOR_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_OUT_OF_RANGE = 85;
    // EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a SHA-256 hash digest
    EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_ADDRESS_NOT_FOUND = 86;
    // EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a SHA-256 hash digest
    EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLETED = 87;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_VALUE_MISMATCH indicates that the SHA-256 hash instruction value check failed
    EXECUTOR_ERROR_SM_MAIN_HASHS_VALUE_MISMATCH = 88;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_PADDING_MISMATCH indicates that the SHA-256 hash instruction padding check failed
    EXECUTOR_ERROR_SM_MAIN_HASHS_PADDING_MISMATCH = 89;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_MISMATCH indicates that the SHA-256 hash instruction size check failed
    EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE_MISMATCH = 90;
    // EXECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISMATCH indicates that the SHA-256 hash length instruction length check failed
    EXECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISMATCH = 91;
    // EXECUTOR_ERROR_SM_MAIN_HASHSLEN_CALLED_TWICE indicates that the SHA-256 hash length instruction called once check failed
    EXECUTOR_ERROR_SM_MAIN_HASHSLEN_CALLED_TWICE = 92;
    // EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_FOUND indicates that the SHA-256 hash digest instruction slot not found
    EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_FOUND = 93;
    // EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH indicates that the SHA-256 hash digest instruction digest check failed
    EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH = 94;
    // EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_CALLED_TWICE indicates that the SHA-256 hash digest instruction called once check failed
    EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST_CALLED_TWICE = 95;
    // EXECUTOR_ERROR_SM_MAIN_HASHS_READ_OUT_OF_RANGE indicates that the main execution SHA-256 check found read out of range
    EXECUTOR_ERROR_SM_MAIN_HASHS_READ_OUT_OF_RANGE = 96;
}